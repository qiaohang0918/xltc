package com.qigan.qiganshop.controller.utils;

import com.alibaba.druid.util.StringUtils;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alipay.api.AlipayApiException;
import com.alipay.api.AlipayClient;
import com.alipay.api.DefaultAlipayClient;
import com.alipay.api.request.AlipayTradeRefundRequest;
import com.alipay.api.response.AlipayTradeRefundResponse;
import com.qigan.qiganshop.pojo.*;
import com.qigan.qiganshop.service.*;
import com.qigan.qiganshop.util.access.JedisUtil;
import com.qigan.qiganshop.util.pay.PayUtil;
import com.qigan.qiganshop.util.pay.wxpay.Httpsrequest;
import com.qigan.qiganshop.util.pay.wxpay.Refund;
import com.qigan.qiganshop.util.pay.wxpay.Sign;
import com.qigan.qiganshop.util.pay.wxpay.Xstreamutil;
import com.qigan.qiganshop.util.result.format.JsonResult;
import com.qigan.qiganshop.util.result.format.ResultCode;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.apache.http.HttpResponse;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.*;

/**
 * 退款
 *
 * @author wanghao
 * @time 2019-06-26 14:53
 */


@RestController
@Api(tags = {"WEB APP 退款接口"})
public class RefundController {
    @Autowired
    private RefundService refundService;
    @Autowired
    private AppUserService userService;

    //所有管理员信息
    public static Map<String , Manager> managerMap=new HashMap<>();

    /**
     * 退款接口
     * 首先检查用户是否存在
     * 检查订单是否处于支付成功但是未发货状态
     * * 非该状态,直接返回失败信息
     * * 该状态下:
     * * * 根据订单编号查询支付信息,并获取支付方式
     * * * 根据支付方式,决定退款方式调用哪个平台
     * * * * 退款方式分为三种:支付宝 微信 余额
     * * * * 退款信息记录到支付表中
     * * * 通知管易云取消订单
     * * * * 成功,修改订单状态
     * * * * * 修改库存
     * * * * 失败,通知用户
     *
     * @param orderId
     * @param token
     * @return
     */
//    @RequestMapping(value = "/app/Refund/refund.do")
//    @ApiOperation(
//            value = "APP 支付退款接口",
//            notes = "orderId 订单号，orderAmount 退款金额,token",
//            httpMethod = "POST")
//    public ResponseEntity refund(@RequestParam String orderId, @RequestParam String token) {
//        AppUser user = userService.getAppUserByToken(token);
//        return new ResponseEntity(refundService.refund(orderId, user.getUserId()), HttpStatus.OK);
//    }

    @RequestMapping(value = "/app/Refund/refund.do")
    @ApiOperation(
            value = "APP 支付退款接口",
            notes = "orderId 订单号，orderAmount 退款金额,token",
            httpMethod = "POST")
    public ResponseEntity refund(@RequestParam String orderId, @RequestParam String token) {
        AppUser user = userService.getAppUserByToken(token);
        return new ResponseEntity(refundService.refund(orderId, user.getUserId()), HttpStatus.OK);
    }




    /**
     * 退款接口
     * 首先检查用户是否存在
     * 检查订单是否处于支付成功但是未发货状态
     * * 非该状态,直接返回失败信息
     * * 该状态下:
     * * * 根据订单编号查询支付信息,并获取支付方式
     * * * 根据支付方式,决定退款方式调用哪个平台
     * * * * 退款方式分为三种:支付宝 微信 余额
     * * * * 退款信息记录到支付表中
     * * * 通知管易云取消订单
     * * * * 成功,修改订单状态
     * * * * * 修改库存
     * * * * 失败,通知用户
     *
     * @param orderId
     * @return
     */
    @RequestMapping(value = "/Refund/refund.do")
    @ApiOperation(
            value = "WEB 支付退款接口",
            notes = "orderId 订单号，orderAmount 退款金额",
            httpMethod = "POST")
    public ResponseEntity webRefund(@RequestParam String orderId,@RequestParam String no) {
        if(no==null || "".equals(no.trim())){
            new ResponseEntity("管理员未登录", HttpStatus.NON_AUTHORITATIVE_INFORMATION);
        }
        Manager currentManager = RefundController.managerMap.get(no);
        if(currentManager==null || !"1".equals(currentManager.getAuthRefund()) ){
            new ResponseEntity("管理员不存在或没有权限", HttpStatus.NON_AUTHORITATIVE_INFORMATION);
        }
        return new ResponseEntity(refundService.webRefund(orderId), HttpStatus.OK);
    }


}
