package com.qigan.qiganshop.controller.backstage;

import com.qigan.qiganshop.controller.utils.PublicControl;
import com.qigan.qiganshop.pojo.Category;
import com.qigan.qiganshop.service.CategoryService;
import com.qigan.qiganshop.util.notnull.NotNull;
import com.qigan.qiganshop.util.result.format.JsonResult;
import com.qigan.qiganshop.util.result.format.ResultCode;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.ServletRequestUtils;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletRequest;

/**
 * 规格 controller
 *
 * @author wanghao
 */
@SuppressWarnings("all")

@RestController
@RequestMapping("/Category")
@Api(value = "商品分类 controller", tags = {"WEB 商品分类操作接口"})
public class CategoryController {
    @Autowired
    private CategoryService service;
    @Autowired
    private JsonResult jr;
    @Autowired
    private PublicControl pc;

    /**
     * 查询所有规格信息或者分页查询或者条件查询,三者随意组合
     *
     * @param request
     * @param categoryName
     * @param page
     * @param size
     * @return
     */


    @RequestMapping("findPage.do")
    @ApiOperation(
            value = "分页获取所有的商品分类列表",
            notes = "分页获取规格信息,specName为规格名称,page 为页码,rows 为每页记录数 \r\n" +
                    "若要查询所有规格,不传递 specName 即可,page 传1,rows 传 10(默认) \r\n" +
                    "该接口可同时完成多个功能,按照规格名称进行查询,需要传递 specName,page,rows 不传默认 page=1,rows=10 ",
            httpMethod = "POST")
    public JsonResult findPage(HttpServletRequest request, String categoryName, Integer page, Integer size) {

        categoryName = ServletRequestUtils.getStringParameter(request, "categoryName", "");
        Category category = new Category();
        if (categoryName != null && !"".equals(categoryName)) {
/**
 * 条件查询
 */
            category.setCateName(categoryName);
            return jr.jsonResultData(ResultCode.SUCCESS.res_code(), ResultCode.SUCCESS.message(), NotNull.checkNull(service.findPage(category, page, size)));
        }
/**
 * 全部查询
 */

        return jr.jsonResultData(ResultCode.SUCCESS.res_code(), ResultCode.SUCCESS.message(), NotNull.checkNull(service.findPage(null, null, null)));

    }

    /*
     *
     * 根据主键查询单个规格信息
     *
     * @param cateId
     * @return

     */

    @RequestMapping("findOne.do")
    @ApiOperation(
            value = "根据 ID 查询商品分类",
            notes = "根据ID查询分类",
            httpMethod = "POST")
    public JsonResult findOne(String cateId) {
        if (cateId != null && !"".equals(cateId)) {
            return jr.jsonResultData(ResultCode.SUCCESS.res_code(), ResultCode.SUCCESS.message(), service.findByCate(cateId));
        }
        return jr.jsonResultData(ResultCode.FAIL.res_code(), "cateId 不能为空!", NotNull.checkNull(new Category()));
    }

    /**
     * 增加商品规格,同时增加商品规格详情
     * @param category
     * @return
     */

    @RequestMapping("add.do")
    @ApiOperation(
            value = "增加商品规格",
            notes = "新增商品规格,同时添加商品规格详情",
            httpMethod = "POST")
    public JsonResult add(@RequestBody Category category) {
        if (category.getCateName() != null && !"".equals(category.getCateName())) {
            Category add = service.add(category);
            if (add.getSort() > 0) {
                return jr.jsonResultData(ResultCode.SUCCESS.res_code(), "规格添加成功!");

            }
        }
        return jr.jsonResultData(ResultCode.FAIL.res_code(), "规格名称不能为空!");


    }

    /**
     * 删除商品规格,同时删除商品详情
     * @param cateIds
     * @return
     */
    @RequestMapping("delete.do")
    @ApiOperation(
            value = "删除商品规格",
            notes = "删除商品规格,同时删除商品规格详情",
            httpMethod = "POST")
    public JsonResult delete(String[] cateIds) {
        return (JsonResult) NotNull.checkNull(pc.deleteUtils(cateIds, service.delete(cateIds)));
    }


    /**
     * 修改商品规格信息,为了保证数据简单处理,先删后增
     *
     * @param category
     * @return
     */

    @RequestMapping("update.do")
    @ApiOperation(
            value = "修改商品规格",
            notes = "修改商品规格,同时修改商品规格详情",
            httpMethod = "POST")
    public JsonResult update(@RequestBody Category category) {
        return (JsonResult) NotNull.checkNull(pc.updateUtils(service.update(category)));
    }

    /*
     *
     * 修改商品规格信息
     * @param
     * @return

     */

    @RequestMapping("updateSort.do")
    @ApiOperation(
            value = "修改商品规格排序",
            notes = "修改商品规格排序,传递排序后的 list ,为保证排序不会重复,后台不参考前端传递的排序值 \r\n" +
                    "只参考传到后台的商品规格顺序,第一个排序即为1,以此类推\r\n" +
                    "注意:每次修改必须传递完整的商品分类排序后的ID,数据不完整,亲人两行泪!",
            httpMethod = "POST")
    public JsonResult updateSort(String cateId1, String cateId2) {
        if (cateId1 != null && !"".equals(cateId1) && cateId1 != null && !"".equals(cateId2)) {
            Integer count = service.updateSort(cateId1, cateId2);
            if (count == 2) {
                return jr.jsonResultData(ResultCode.SUCCESS.res_code(), "修改排序成功!");
            } else {
                return jr.jsonResultData(ResultCode.FAIL.res_code(), "修改排序失败!");

            }
        } else {
            return jr.jsonResultData(ResultCode.FAIL.res_code(), "修改排序失败,ID为空!");

        }
    }
    
    @RequestMapping("/updateImage.do")
    public JsonResult updateCateImage(String cateId, String imageUrl){
    	service.updateImage(cateId, imageUrl);
    	return jr.jsonResultData(ResultCode.SUCCESS.res_code(), "修改图片成功!");
    }

}



