package com.qigan.qiganshop.controller.utils;

import com.qigan.qiganshop.pojo.AppUser;
import com.qigan.qiganshop.pojo.Order;
import com.qigan.qiganshop.pojo.Pay;
import com.qigan.qiganshop.service.AppUserService;
import com.qigan.qiganshop.service.OrderService;
import com.qigan.qiganshop.service.PayService;
import com.qigan.qiganshop.service.XltcOrderService;
import com.qigan.qiganshop.util.access.JedisUtil;
import com.qigan.qiganshop.util.exception.ExceptionUtil;
import com.qigan.qiganshop.util.notnull.NotNull;
import com.qigan.qiganshop.util.notnull.StringNotNull;
import com.qigan.qiganshop.util.pay.PayUtil;
import com.qigan.qiganshop.util.picture.PicUtil;
import com.qigan.qiganshop.util.result.format.JsonResult;
import com.qigan.qiganshop.util.result.format.ResultCode;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.apache.commons.codec.digest.DigestUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Set;

/**
 * @author lpfei3088
 */
@RestController
@RequestMapping("/app/balancepay")
@Api(tags = {"钱包支付管理接口"})
public class BalancePayController {

    @Autowired
    private JsonResult jr;
    @Autowired
    private PayService payService;
    @Autowired
    private AppUserService userService;
    @Autowired
    private PicUtil picUtil;
    @Autowired
    private XltcOrderService service;
    @Autowired
    private JedisUtil jedisUtil;
    @Autowired
    OrderService orderService;


    @RequestMapping(value = "/pay.do")
    @ApiOperation(
            value = "钱包支付接口",
            notes = "token,total 金额 orderId 订单id,paypassword 支付密码",
            httpMethod = "POST")
    public JsonResult pay(String token, String total, String orderId, String paypassword, HttpServletRequest request, HttpServletResponse response) throws Exception {
        if(!StringNotNull.check(orderId))
            return new JsonResult(ResultCode.FAIL.res_code(),"订单不存在！");
        try {
            AppUser user = userService.getAppUserByToken(token);
            if (user != null) {
                String ppwdb = user.getPaypassword();
                String ppw = DigestUtils.md5Hex(paypassword);
                if (!ppw.equals(ppwdb)) {
                    return jr.jsonResultData(ResultCode.FAIL.res_code(), "支付密码有误");
                }
                Double balance = user.getBalance();
                Double totalD = Double.parseDouble(total);
                int bl = balance.compareTo(totalD);
                if (bl < 0) {
                    return jr.jsonResultData(ResultCode.FAIL.res_code(), "余额不足");
                } else {
                    //判断订单状态
                    Order o = orderService.findOne(orderId);
                    if(o == null || "2".equals(o.getStatus())){
                        return jr.jsonResultData(ResultCode.FAIL.res_code(), "抱歉:订单超时");
                    }
                    if("1".equals(o.getStatus())){
                        return jr.jsonResultData(ResultCode.FAIL.res_code(), "您已经支付过了");
                    }
                    //开始支付
                    Double yue = balance - totalD;
                    user.setBalance(yue);
                    if (NotNull.checkString(user.getImageUrl())) {
                        user.setImageUrl(picUtil.deleteUrlHead(user.getImageUrl()).replace(",",""));
                    }
                    int suc = userService.updateAppUserToken(user);
                    if (suc == 1) {
                        //支付成功，修改订单状态
//                        o.setStatus("1");
//                        o.setWaitingPay("2");
                        boolean flag=true;
                        //尝试三次修改订单状态
                        for (int i = 0; i < 3; i++) {
                            try {
                                int j = orderService.updatePayedByOrderId(orderId);
                                if(i>0)
                                    break;
                            }catch (Exception e){
                                //退还用户金额
                                int r =userService.reGivenUserAmount(user.getUserId(),total);
                                flag = false;
                                break;
                            }
                        }
                        if(!flag)
                            return new JsonResult(ResultCode.FAIL.res_code(),"订单支付失败，请重试！");
                        Pay pay = new Pay();
                        String out_trade_no = PayUtil.getCurrTime() + PayUtil.getRandomString(5);
                        pay.setOutPayCode(out_trade_no);
                        pay.setPayCode("");
                        pay.setOrderId(orderId);
                        pay.setPayment(total);
                        pay.setPayTypeCode("balance");
                        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                        pay.setPaytime(sdf.format(new Date()));
                        payService.insertPay(pay);
                    }

                    return jr.jsonResultData(ResultCode.SUCCESS.res_code());
                }
            }
            return jr.jsonResultData(ResultCode.FAIL.res_code());
        } catch (Exception e) {
            e.printStackTrace();
            return jr.jsonResultData(ResultCode.ERROR.res_code());
        }
    }


}
