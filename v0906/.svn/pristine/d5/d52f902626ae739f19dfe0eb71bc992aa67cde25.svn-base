/**
 * 
 */
package com.qigan.qiganshop.redis.event;

import javax.annotation.PostConstruct;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.connection.Message;
import org.springframework.stereotype.Service;

import com.qigan.qiganshop.constant.RedisConstant;
import com.qigan.qiganshop.redis.config.RedisSubscribeListenerAbstract;
import com.qigan.qiganshop.service.UserCouponService;
import com.qigan.qiganshop.util.Redis.RedisLock;
import com.qigan.qiganshop.util.Redis.RedisUtil;

import redis.clients.jedis.Jedis;

/**
 * @author wyy
 *
 */
@Service("keyExpired")
public class KeyExpiredListener extends RedisSubscribeListenerAbstract{

	private Jedis jedis;
	
	private static final String SUFF = ":expired";
	
	private static final String SUCCESS = "success";
	
	private static final String FAIL = "fail";
	
	@Autowired
	UserCouponService couponService;
	
	public static KeyExpiredListener keyListener;
	
	@PostConstruct
	public void init(){
		keyListener = this;
	}
	
	@Override
	public void redisChannelHandle(Message message, byte[] pattern) {
		// TODO Auto-generated method stub
		final String body = new String(message.getBody());
		if(StringUtils.isNotBlank(body) && body.indexOf(":") != -1){
			String[] keys = body.split(":");
			handleExpireKey(keys[0], keys[1]);
		}
	}

	private void handleExpireKey(String type, String expiredKey){
		String newKey = expiredKey + SUFF;
		RedisLock r = new RedisLock();
		try {
			r.lock();
			jedis = RedisUtil.getConnection();
			String value = jedis.get(newKey);
			if(StringUtils.isNotBlank(value)) {
				if(SUCCESS.equalsIgnoreCase(value)) 
					return;
				
			}
			switch (type + ":") {
			case RedisConstant.USER_COUPON:
				keyListener.couponService.expireUserCoupon(expiredKey);
				break;

			default:
				break;
			}
			//数据库操作start
			//end
			jedis.set(newKey, SUCCESS);
			jedis.expire(newKey, 30);
		} catch (Exception e) {
			// TODO: handle exception
			jedis.set(newKey, FAIL);
			jedis.hset("KEY_EXPIRED", newKey, "1");
		} finally {
			// TODO: handle finally clause
			r.unlock();
			jedis.close();
		}
	}

}
