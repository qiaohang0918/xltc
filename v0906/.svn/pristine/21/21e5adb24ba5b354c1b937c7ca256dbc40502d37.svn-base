package com.qigan.qiganshop.service.impl;

import com.mysql.jdbc.TimeUtil;
import com.qigan.qiganshop.constant.RedisConstant;
import com.qigan.qiganshop.constant.TimeFormat;
import com.qigan.qiganshop.mapper.GoodsMapper;
import com.qigan.qiganshop.mapper.TbPresellGoodsMapper;
import com.qigan.qiganshop.myutils.SqlConstructUtils;
import com.qigan.qiganshop.pojo.*;
import com.qigan.qiganshop.service.StockService;
import com.qigan.qiganshop.service.XltcPreSellGoodsService;
import com.qigan.qiganshop.util.access.JedisUtil;
import com.qigan.qiganshop.util.notnull.StringNotNull;
import com.qigan.qiganshop.util.result.XltcResult;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.*;
import java.util.stream.Collectors;

/**
 * @Aurher: QiaoHang
 * @Description:
 * @Data: 2019/10/5 14:55
 * @Modified By:
 */
@Service
@Transactional(rollbackFor = Exception.class)
public class XltcPreSellGoodsServiceImpl implements XltcPreSellGoodsService {

    @Autowired
    TbPresellGoodsMapper mapper;
    @Autowired
    JedisUtil jedisUtil;
    @Autowired
    GoodsMapper goodsMapper;


    /**
     * 添加预售商品
     * @param presellGoods
     * @return
     */
    @Override
    public XltcResult addPreSellGoods(TbPresellGoods presellGoods) {
        //插入数据库
        //未启用
        //校验开始 / 结束时间！
        XltcResult xltcResult = this.checkStartAndAfterTime(presellGoods);
        if(xltcResult!=null)
            return xltcResult;
        TbPresellGoodsExample example = new TbPresellGoodsExample();
        TbPresellGoodsExample.Criteria criteria = example.createCriteria();
        criteria.andLevelEqualTo(presellGoods.getLevel());
        criteria.andPresellgoodscodeEqualTo(presellGoods.getPresellgoodscode());
        List<TbPresellGoods> goods = mapper.selectByExample(example);
        if(!SqlConstructUtils.nullList(goods)){
            return XltcResult.error("当前商品已本批次的预售清单中！");
        }
        //校验商品存在
        List<Goods> goodsList = goodsMapper.findGoodsByCodes("'"+presellGoods.getPresellgoodscode()+"'");
        if(SqlConstructUtils.nullList(goodsList)){
            return XltcResult.error("该商品不存在！");
        }
        //校验商品审核状态
        String status = goodsList.get(0).getStatus();
        String del = goodsList.get(0).getDel();
        if(!StringNotNull.check(status) || !"2".equals(status)){
            return XltcResult.error("该商品处于未审核状态，请先审核！");
        }
        //校验商品当前禁用状态
        if(StringNotNull.check(del) && "0".equals(del)){
            return XltcResult.error("添加预售商品，需要保证当前该商品状态为禁用状态！");
        }
        presellGoods.setEnabled("0");
        presellGoods.setSellnum("0");
        presellGoods.setPreSellId(UUID.randomUUID().toString().replace("-",""));
        int i = mapper.insert(presellGoods);
        return XltcResult.ok();
    }

    /**
     * 修改
     * @param tbPresellGoods
     * @return
     */
    @Override
    public XltcResult updatePreSellGoods(TbPresellGoods tbPresellGoods) {
        if(!StringNotNull.check(tbPresellGoods.getDuringbefore(),
                tbPresellGoods.getDuringafter())){
            return XltcResult.error("开始/结束时间  必传！");
        }
        //校验开始 / 结束时间！
        XltcResult xltcResult = this.checkStartAndAfterTime(tbPresellGoods);
        if(xltcResult!=null)
            return xltcResult;
        //如果修改目的是启用，则需要排除是否该code还在上期预售中！
        if("1".equals(tbPresellGoods.getEnabled())){
            //校验同一商品批次冲突
            TbPresellGoodsExample example = new TbPresellGoodsExample();
            TbPresellGoodsExample.Criteria criteria = example.createCriteria();
            criteria.andPresellgoodscodeEqualTo(tbPresellGoods.getPresellgoodscode());
            criteria.andEnabledEqualTo("1");
            List<TbPresellGoods> goods = mapper.selectByExample(example);
            if(!SqlConstructUtils.nullList(goods)){
                if(!tbPresellGoods.getLevel().equals(goods.get(0).getLevel())){
                    //同一商品  不同期号  不让同时预售，否则覆盖上期(期号和截至时间)
                    return XltcResult.error("当前商品上一期预售还未结束！请先结束上期预售！");
                }
            }
            //校验商品启用状态
            List<Goods> goodsList = goodsMapper.findGoodsByCodes("'"+tbPresellGoods.getPresellgoodscode()+"'");
            if(SqlConstructUtils.nullList(goodsList)){
                return XltcResult.error("该商品不存在！");
            }
            String status = goodsList.get(0).getStatus();
            String del = goodsList.get(0).getDel();
            if(!StringNotNull.check(status) || !"2".equals(status)){
                return XltcResult.error("该商品处于未审核状态，请先审核！");
            }
        }
        int i = mapper.updateByPrimaryKeySelective(tbPresellGoods);
        if(i>0){
            //查询更新后的记录
            TbPresellGoods goods = mapper.selectByPrimaryKey(tbPresellGoods.getPreSellId());
            if("0".equals(goods.getEnabled())){
                //移除受限商品
                jedisUtil.removeElementFromHash(RedisConstant.PRESELL_GOODS_CODE,goods.getPresellgoodscode());
                //修改商品状态为禁用
                goodsMapper.updateGoodsStatus(goods.getPresellgoodscode(),"1");
            }
            if("1".equals(tbPresellGoods.getEnabled())){
                if(StringNotNull.check(tbPresellGoods.getDuringafter())){
                    //添加/更新 受限商品
                    jedisUtil.setToHash(RedisConstant.PRESELL_GOODS_CODE,goods.getPresellgoodscode(),goods.getLevel()+"@"+goods.getDuringafter().replace(" ","_"));
                }
                //修改商品为启用状态
                goodsMapper.updateGoodsStatus(goods.getPresellgoodscode(),"0");
            }
            return XltcResult.ok();
        }else {
            return XltcResult.error("操作错误。联系管理员");
        }
    }



    /**
     * 删除预售商品 前提是预售未开始
     * @param tbPresellGoods
     * @return
     */
    @Override
    public XltcResult deletePreSellGoods(TbPresellGoods tbPresellGoods) {
        XltcResult result = checkStartAndAfterTime(tbPresellGoods);
        if(result!=null)
            return result;
        try {
            Date before = TimeFormat.nomalFormat.parse(tbPresellGoods.getDuringbefore());
            if(before.getTime() > new Date().getTime()){
                //查询该预售详情
                TbPresellGoods goods = mapper.selectByPrimaryKey(tbPresellGoods.getPreSellId());
                if(goods != null){
                    //开始时间大于当前时间(未开始，才允许删除)
                    mapper.deleteByPrimaryKey(tbPresellGoods.getPreSellId());
                    if("1".equals(goods.getLevel())){
                        //当前商品预售在启用，删除redis（code）
                        jedisUtil.removeElementFromHash(RedisConstant.PRESELL_GOODS_CODE,tbPresellGoods.getPresellgoodscode());
                    }
                }
            }else {
                return XltcResult.error("删除预售商品必须在本期预售未开始是操作！");
            }
        }catch (Exception e){
            return XltcResult.error("删除失败，联系管理员！");
        }
        return XltcResult.ok();
    }

    /**
     * 查询商品 根据 code
     * @param presellgoodscode
     * @return
     */
    @Override
    public List<Goods> findGoodsByCodes(String presellgoodscode) {
        return goodsMapper.findGoodsByCodes(presellgoodscode);
    }

    @Override
    public TbPresellGoods findPreSellGoodsByCodeAndLevel(String code, String level) {
        TbPresellGoodsExample example = new TbPresellGoodsExample();
        TbPresellGoodsExample.Criteria criteria = example.createCriteria();
        criteria.andPresellgoodscodeEqualTo(code);
        criteria.andLevelEqualTo(level);
        List<TbPresellGoods> goods = mapper.selectByExample(example);
        return goods!=null && goods.size()>0 ? goods.get(0) : null;
    }


    /**
     * 校验时间
     * @param tbPresellGoods
     * @return
     */
    public XltcResult checkStartAndAfterTime( TbPresellGoods tbPresellGoods){
        try {
            Date before = TimeFormat.nomalFormat.parse(tbPresellGoods.getDuringbefore());
            Date after = TimeFormat.nomalFormat.parse(tbPresellGoods.getDuringafter());
            Date preSendTime = null;
            if(StringNotNull.check(tbPresellGoods.getPresendtime())){
                preSendTime = TimeFormat.nomalFormat.parse(tbPresellGoods.getPresendtime());
            }
            if(before.getTime() >= after.getTime()){
                //校验开始/结束时间
                return XltcResult.error("开始时间必须小于结束时间");
            }
            if(preSendTime != null){
                //校验配送时间
                if(after.getTime() >= preSendTime.getTime()){
                    return XltcResult.error("预计配送时间必须大于结束时间");
                }
            }
        }catch (Exception e){
            return XltcResult.error("开始时间/结束时间/预计发货时间  格式有误，应为[ yyyy-MM-dd HH:mm:ss ]！");
        }
        return null;
    }


    /**
     * @param code
     * @param level
     * @param enabled
     * @return
     */
    @Override
    public XltcResult searchPreSellGoods(String enabled, String level, String code) {
        //查询预售商品 返回售价
        TbPresellGoodsExample example  = new TbPresellGoodsExample();;
        TbPresellGoodsExample.Criteria criteria = example.createCriteria();
        if(StringNotNull.check(enabled)){
            criteria.andEnabledEqualTo(enabled);
        }
        if(StringNotNull.check(level)){
            criteria.andLevelEqualTo(level);
        }
        if(StringNotNull.check(code)){
            criteria.andPresellgoodscodeEqualTo(code);
        }
        //返回预售商品baseMessage  预售message
        ArrayList<Map<String, Object>> mapList = new ArrayList<>();
        List<TbPresellGoods> presellGoods = mapper.selectByExample(example);
        if(!SqlConstructUtils.nullList(presellGoods)){
            for (TbPresellGoods presellGood : presellGoods) {
                Goods goods = goodsMapper.findByCode(presellGood.getPresellgoodscode());
                if(goods!=null){
                    HashMap<String, Object> map = new HashMap<>();
                    map.put("goodsDetails",goods);
                    map.put("preSellDetails",presellGood);
                    mapList.add(map);
                }
            }
        }
        if(SqlConstructUtils.nullList(mapList)){
            return XltcResult.ok(mapList);
        }else {
            List<Map<String, Object>> collect = mapList.stream().sorted(new Comparator<Map<String, Object>>() {
                @Override
                public int compare(Map<String, Object> o1, Map<String, Object> o2) {
                    TbPresellGoods order1 = (TbPresellGoods) o1.get("preSellDetails");
                    TbPresellGoods order2 = (TbPresellGoods) o2.get("preSellDetails");
                    return Integer.parseInt(order2.getLevel()) - Integer.parseInt(order1.getLevel());
                }
            }).collect(Collectors.toList());
            return XltcResult.ok(collect);
        }
    }


    /**
     * 添加本期该预售商品数量
     * @param code
     * @param level
     * @param count
     * @return
     */
    @Override
    public int addCurrentPreSelllGoodsSellNum(String code, String level, String count) {
        if(!StringNotNull.check(code,level,count))
            return  0;
        int i = mapper.addCurrentPreSelllGoodsSellNum(code,level,count);
        return i;
    }


    /**
     * 查询缓存中的预售商品信息
     */
    public Set<String> findPreSellGoods(){
        Set<String> preSellGoodsCodes = jedisUtil.getElementsFromHash(RedisConstant.PRESELL_GOODS_CODE);
        return preSellGoodsCodes;
    }



}
