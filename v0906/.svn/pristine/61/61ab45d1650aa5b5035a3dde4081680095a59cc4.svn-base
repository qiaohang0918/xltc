package com.qigan.qiganshop.controller.utils;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeMap;

import javax.servlet.ServletInputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.qigan.qiganshop.util.upload.IDUtils;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.ServletRequestUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.alibaba.druid.util.StringUtils;
import com.qigan.qiganshop.constant.PayConstant;
import com.qigan.qiganshop.constant.RedisConstant;
import com.qigan.qiganshop.mapper.OrderMapper;
import com.qigan.qiganshop.pojo.Info;
import com.qigan.qiganshop.pojo.Order;
import com.qigan.qiganshop.service.InfoService;
import com.qigan.qiganshop.service.ItemService;
import com.qigan.qiganshop.service.OrderItemService;
import com.qigan.qiganshop.service.PayService;
import com.qigan.qiganshop.service.RefundService;
import com.qigan.qiganshop.service.StockService;
import com.qigan.qiganshop.service.XltcOrderService;
import com.qigan.qiganshop.service.XltcOrderServiceConcat;
import com.qigan.qiganshop.util.access.JedisUtil;
import com.qigan.qiganshop.util.notnull.StringNotNull;
import com.qigan.qiganshop.util.pay.PayUtil;
import com.qigan.qiganshop.util.pay.wxpay.Httpsrequest;
import com.qigan.qiganshop.util.pay.wxpay.Pay;
import com.qigan.qiganshop.util.pay.wxpay.Query;
import com.qigan.qiganshop.util.pay.wxpay.Sign;
import com.qigan.qiganshop.util.pay.wxpay.Xstreamutil;
import com.qigan.qiganshop.util.result.format.JsonResult;
import com.qigan.qiganshop.util.result.format.ResultCode;
import com.qigan.qiganshop.utils.json.JsonUtils;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

/**
 * @author lpfei3088
 */
@RestController
@RequestMapping("/app/wxpay")
@Api(tags = { "微信支付管理接口" })
public class WxpayController {

	@Value("${SERVER_URL}")
	private String SERVER_URL;
	@Autowired
	private JsonResult jr;
	@Autowired
	private PayService payService;
	@Autowired
	private JedisUtil jedisUtil;
	@Value("${Key}")
	private String Key;
	@Value("${appid}")
	private String appid;
	@Value("${mch_id}")
	private String mch_id;
	@Value("${spbill_create_ip}")
	private String spbill_create_ip;
	@Value("${trade_type}")
	private String trade_type;
	@Autowired
	private XltcOrderService service;
	
	@Autowired
	private XltcOrderServiceConcat serviceConcat;

	@Autowired
	XltcOrderService orderService;

	@Autowired
	private InfoService infoService;

	@Autowired
	private StockService stockService;

	@Autowired
	private ItemService itemService;

	@Autowired
	private OrderMapper orderMapper;
	
	@Autowired
	RefundService refoundService;
	
	public static final String SIT_NOTIFY = "http://sit.xiletongcheng.com/";

    @Autowired
    private OrderItemService orderItemService;
    
    private static final DateTimeFormatter DF = DateTimeFormatter.ofPattern("yyyyMMddHHmmss");

	@RequestMapping(value = "/pay.do")
	@ApiOperation(value = "支付接口", notes = "total_fee 支付金额 ，body 主题标题 如果是开通会员，一定要写 开通会员 几个字 钱包充值,orderId 订单id", httpMethod = "POST")
	public JsonResult pay(HttpServletRequest request, HttpServletResponse Reesponse) throws Exception {
		try {
			String notify_url = SERVER_URL + "qiganshop/app/wxpay/notify.do";
//			String notify_url = SIT_NOTIFY + "qiganshop/app/wxpay/notify.do";
			String token = ServletRequestUtils.getStringParameter(request, "token", "");
			String nonce_str = PayUtil.getRandomString(20);
			String out_trade_no = PayUtil.getCurrTime() + PayUtil.getRandomString(5);
			String orderId = ServletRequestUtils.getStringParameter(request, "orderId", "");
			Order o = orderService.findOne(orderId);
			if(o == null || "2".equals(o.getStatus())){
				return jr.jsonResultData(ResultCode.FAIL.res_code(), "抱歉:订单超时");
			}
			
			if("1".equals(o.getStatus())){
				return jr.jsonResultData(ResultCode.FAIL.res_code(), "您已经支付过了");
			}
			
			//锁订单
			boolean lockResult = service.lockOrderWaitingPay(orderId);
			if(!lockResult){
				return jr.jsonResultData(ResultCode.FAIL.res_code(), "拉取支付信息失败，订单不存在或已被释放!");
			}
			jedisUtil.set(out_trade_no.getBytes(), (token + "&" + orderId).getBytes());
			jedisUtil.setToHash(RedisConstant.ORDER_PAY, orderId, PayConstant.WX_PAY + ":" + out_trade_no);
			
			String total = ServletRequestUtils.getStringParameter(request, "total_fee");
			BigDecimal total1 = new BigDecimal(total);
			BigDecimal total2 = new BigDecimal(100);
			int total_fee = total1.multiply(total2).intValue();
			String body = ServletRequestUtils.getStringParameter(request, "body", "喜乐同城");
			String orderTime = o.getDealDatetime();
			LocalDateTime ldt = LocalDateTime.parse(orderTime.replaceAll("[[\\s-:punct:]]", ""), DF);
		    String expire = ldt.plusMinutes(2).format(DF);
			
			SortedMap<Object, Object> parameters = new TreeMap<Object, Object>();
			parameters.put("appid", appid);
			parameters.put("body", body);
			parameters.put("mch_id", mch_id);
			parameters.put("nonce_str", nonce_str);
			parameters.put("notify_url", notify_url);
			parameters.put("out_trade_no", out_trade_no);
			parameters.put("spbill_create_ip", spbill_create_ip);
			parameters.put("total_fee", total_fee);
			parameters.put("trade_type", trade_type);
			parameters.put("attach", body);
			parameters.put("time_expire", expire);

			String sign = Sign.createSign(parameters, Key);
			Pay pay = new Pay();
			pay.setAppid(appid);
			pay.setBody(body);
			pay.setMch_id(mch_id);
			pay.setNonce_str(nonce_str);
			pay.setNotify_url(notify_url);
			pay.setSign(sign);
			pay.setOut_trade_no(out_trade_no);
			pay.setSpbill_create_ip(spbill_create_ip);
			pay.setTrade_type(trade_type);
			pay.setTotal_fee(total_fee);
			pay.setAttach(body);
			pay.setTime_expire(expire);

			Xstreamutil.xstream.alias("xml", Pay.class);

			String xml = Xstreamutil.xstream.toXML(pay).replaceAll("__", "_");
			// System.out.println(xml);
			String requestUrl = "https://api.mch.weixin.qq.com/pay/unifiedorder";
			String respxml = null;
			String prepay_id = null;

			respxml = Httpsrequest.HttpsRequest(requestUrl, "POST", xml);

			Document doc = DocumentHelper.parseText(respxml);
			Element root = doc.getRootElement();
			List<Element> elementList = root.elements();
			for (int i = 0; i < elementList.size(); i++) {
				if (elementList.get(i).getName().equals("prepay_id")) {
					prepay_id = elementList.get(i).getTextTrim();
				}
			}
			String timeStamp = PayUtil.getTempStamp();
			String Package = "Sign=WXPay";
			SortedMap<Object, Object> h5parameter = new TreeMap<Object, Object>();
			h5parameter.put("appid", appid);
			h5parameter.put("noncestr", nonce_str);
			h5parameter.put("package", Package);
			h5parameter.put("partnerid", mch_id);
			h5parameter.put("prepayid", prepay_id);
			h5parameter.put("timestamp", timeStamp);
			String Paysign = Sign.createSign(h5parameter, Key);
			h5parameter.put("sign", Paysign);
			h5parameter.put("out_trade_no", out_trade_no);
			return jr.jsonResultData(ResultCode.SUCCESS.res_code(), "调用成功!", h5parameter);
		} catch (Exception e) {
			e.printStackTrace();
			return jr.jsonResultData(ResultCode.ERROR.res_code());
		}
	}

	@RequestMapping("/notify.do")
	@ApiOperation(value = "支付异步通知接口", notes = "服务器内部接口不用调用", httpMethod = "POST")
	public void notify(HttpServletRequest httpRequest, HttpServletResponse httpResponse) throws Exception {
		try {
			ServletInputStream in = httpRequest.getInputStream();
			BufferedReader reader = new BufferedReader(new InputStreamReader(in, "UTF-8"));
			String sReqData = "";
			String itemStr = "";
			while (null != (itemStr = reader.readLine())) {
				sReqData += itemStr;
			}

			Map<String, String> map = PayUtil.xmlToMap(sReqData);
			String return_code = map.get("return_code");
			String result_code = map.get("result_code");
			String trade_no = map.get("transaction_id");
			String out_trade_no = map.get("out_trade_no");
			String total_fee = map.get("total_fee");
			String attach = map.get("attach");
			Double tf = Double.parseDouble(total_fee) / 100;
			String time_end = map.get("time_end");
			SimpleDateFormat te = new SimpleDateFormat("yyyyMMddHHmmss");
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String tend = sdf.format(te.parse(time_end));
			if ("SUCCESS".equals(return_code) && "SUCCESS".equals(result_code)) {
				com.qigan.qiganshop.pojo.Pay old = payService.selectByOutpaycode(out_trade_no);
				if (old != null) {
					return;
				}
				String tokenorderId = new String(jedisUtil.get(out_trade_no.getBytes()));
				if (StringUtils.isEmpty(tokenorderId)) {
					return;
				}
				String[] to = tokenorderId.split("&");
				String token = to[0];
				String orderId = "";
				if (to.length == 2) {
					orderId = to[1];
				}
				
				Order order = orderMapper.findOne(orderId);
				if(order == null)
					return ;
				
				if("2".equals(order.getStatus())){
					order.setStatus("10");
					orderMapper.update(order);
					System.err.println(total_fee);
					ResponseEntity responseEntity = refoundService.wxRefund(out_trade_no, tf + "");
					if (responseEntity.getStatusCode().is2xxSuccessful()) {
						Info info = new Info();
						info.setOrderId(orderId);
						info.setUserId(order.getUserId());
						info.setInfo("订单超时，已将支付金额退还至【微信】");
						infoService.add(info);
                    }
					return;
				}
				
				if(!"0".equals(order.getStatus()))
					return;
				
				//交易类型
				if ("开通会员".equals(attach)) {
					payService.updateMember(token);
				} else if ("钱包充值".equals(attach)) {
					payService.updateBalance(token, tf);
				}
				com.qigan.qiganshop.pojo.Pay pay = new com.qigan.qiganshop.pojo.Pay();
				pay.setPayCode(trade_no);
				pay.setOutPayCode(out_trade_no);
				pay.setOrderId(orderId);
				pay.setPayTypeCode("weixin");
				pay.setPayment(tf.toString());
				pay.setPaytime(tend);
				int suc = payService.insertPay(pay);

				Info info = new Info();
				info.setOrderId(orderId);
				info.setUserId(order.getUserId());
				info.setInfo("微信支付成功!");
				infoService.add(info);

				order.setStatus("1");
				order.setPayCode(trade_no);
				order.setPayTime(pay.getPaytime());
				//释放支付锁
				order.setWaitingPay("2");
				orderMapper.update(order);

				if (suc == 1) {
					jedisUtil.del(out_trade_no.getBytes());
					// String resultMsg =
					// "<xml><return_code><![CDATA[SUCCESS]]></return_code><return_msg><![CDATA[OK]]></return_msg></xml>";
					String resultMsg = "success";
					PrintWriter out = httpResponse.getWriter();
					out.write(resultMsg);
					out.flush();
					out.close();
				}
				// *****************查询未推送的订单进行推送******************
				Set<String> elementsFromHash = jedisUtil.getElementsFromHash("pub_err");
				if (elementsFromHash != null && elementsFromHash.size() > 0) {
					for (String unPubOrderId : elementsFromHash) {
						String result = service.pullToGuanYi(unPubOrderId);
						if ("ok".equals(result.trim()))
							jedisUtil.removeElementFromHash("pub_err", unPubOrderId);
					}
				}



				// ***************推送订单到管易（尝试3次）********************
				label: while (true) {
					String message = "";
					try {
//						for (int i = 0; i < 3; i++) {
						if (StringNotNull.check(orderId)) {
							// 用实体进行接收订单信息
							JsonResult weixin = serviceConcat.optStock(out_trade_no, "weixin", orderId);
							String res_code = weixin.getRes_code();
							message = weixin.getMessage();
							if (ResultCode.SUCCESS.res_code().equals(res_code) && "支付成功".equals(message))
								break label;
						}
//						}
					} catch (Exception e) {
						// 记录推送异常的日志
						jedisUtil.setToHash("pub_err", orderId, "0");
						break label;
					}
					// 记录推送异常的日志
					jedisUtil.setToHash("pub_err", orderId, "0");
					break label;
				}
			}
		} catch (Exception e) {
			System.err.println("支付失败");
			e.printStackTrace();
		}
	}

	public Map orderquery(String out_trade_no) {
		try {
			String nonce_str = PayUtil.getRandomString(20);
			SortedMap<Object, Object> parameters = new TreeMap<Object, Object>();
			parameters.put("appid", appid);
			parameters.put("mch_id", mch_id);
			parameters.put("nonce_str", nonce_str);
			parameters.put("out_trade_no", out_trade_no);

			String sign = Sign.createSign(parameters, Key);
			Query pay = new Query();
			pay.setAppid(appid);
			pay.setMch_id(mch_id);
			pay.setNonce_str(nonce_str);
			pay.setSign(sign);
			pay.setOut_trade_no(out_trade_no);

			Xstreamutil.xstream.alias("xml", Query.class);

			String xml = Xstreamutil.xstream.toXML(pay).replaceAll("__", "_");
			String requestUrl = "https://api.mch.weixin.qq.com/pay/orderquery";
			String respxml = null;
			String trade_state = null;

			respxml = Httpsrequest.HttpsRequest(requestUrl, "POST", xml);

			Document doc = DocumentHelper.parseText(respxml);
			Element root = doc.getRootElement();
			List<Element> elementList = root.elements();
			Map<String, Object> map = new HashMap<>();
			for (int i = 0; i < elementList.size(); i++) {
				map.put(elementList.get(i).getName(), elementList.get(i).getTextTrim());
				if (elementList.get(i).getName().equals("trade_state")) {
					trade_state = elementList.get(i).getTextTrim();
				}
			}
			return map;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}


	/**
	 * 微信支付
	 * @param request
	 * @param Reesponse
	 * @return
	 * @throws Exception
	 */
	public JsonResult wechatDeposit(HttpServletRequest request, HttpServletResponse Reesponse) throws Exception {
		String notify_url = SERVER_URL + "qiganshop/app/wxpay/depositNotify.do";
		String token = ServletRequestUtils.getStringParameter(request, "token", "");
		String nonce_str = PayUtil.getRandomString(20);
		String out_trade_no = PayUtil.getCurrTime() + PayUtil.getRandomString(5);
		//生成订单id，载入缓存
		String depositOrderId = IDUtils.genItemId();
		//支付falg
		jedisUtil.set(out_trade_no, token + "&" + depositOrderId);
		//支付记录
		jedisUtil.setToHash(RedisConstant.DEPOSIT_ORDER, depositOrderId, PayConstant.WX_PAY + ":" + out_trade_no);
		//插入支付订单记录（不可退款）
		//......
		String total = ServletRequestUtils.getStringParameter(request, "total_fee");
		BigDecimal total1 = new BigDecimal(total);
		BigDecimal total2 = new BigDecimal(100);
		int total_fee = total1.multiply(total2).intValue();
		String body = ServletRequestUtils.getStringParameter(request, "body", "喜乐同城");
		//插入支付订单记录


//		//支付单的过期时间
//		String orderTime = o.getDealDatetime();
//		LocalDateTime ldt = LocalDateTime.parse(orderTime.replaceAll("[[\\s-:punct:]]", ""), DF);
//		String expire = ldt.plusMinutes(2).format(DF);

		SortedMap<Object, Object> parameters = new TreeMap<Object, Object>();
		parameters.put("appid", appid);
		parameters.put("body", body);
		parameters.put("mch_id", mch_id);
		parameters.put("nonce_str", nonce_str);
		parameters.put("notify_url", notify_url);
		parameters.put("out_trade_no", out_trade_no);
		parameters.put("spbill_create_ip", spbill_create_ip);
		parameters.put("total_fee", total_fee);
		parameters.put("trade_type", trade_type);
		parameters.put("attach", body);
		//parameters.put("time_expire", expire);
		return  null;
	}


	private String notifySuccess(){
		return "<xml>" + "<return_code><![CDATA[SUCCESS]]></return_code>"
                + "<return_msg><![CDATA[OK]]></return_msg>" + "</xml> ";
	}

}
