package com.qigan.qiganshop.mapper;

import com.qigan.qiganshop.domain.TbOrderComment;
import com.qigan.qiganshop.domain.TbOrderCommentExample.Criteria;
import com.qigan.qiganshop.domain.TbOrderCommentExample.Criterion;
import com.qigan.qiganshop.pojo.TbOrderCommentModel;
import com.qigan.qiganshop.domain.TbOrderCommentExample;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.ibatis.jdbc.SQL;

public class TbOrderCommentSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_order_comment
     *
     * @mbg.generated
     */
    public String countByExample(TbOrderCommentExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("tb_order_comment");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_order_comment
     *
     * @mbg.generated
     */
    public String deleteByExample(TbOrderCommentExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("tb_order_comment");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_order_comment
     *
     * @mbg.generated
     */
    public String insertSelective(TbOrderComment record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("tb_order_comment");
        
        if (record.getCommentId() != null) {
            sql.VALUES("comment_id", "#{commentId,jdbcType=BIGINT}");
        }
        
        if (record.getOrderid() != null) {
            sql.VALUES("orderId", "#{orderid,jdbcType=VARCHAR}");
        }
        
        if (record.getDeliveryLevel() != null) {
            sql.VALUES("delivery_level", "#{deliveryLevel,jdbcType=DECIMAL}");
        }
        
        if (record.getDeliveryComment() != null) {
            sql.VALUES("delivery_comment", "#{deliveryComment,jdbcType=VARCHAR}");
        }
        
        if (record.getGoodsLevel() != null) {
            sql.VALUES("goods_level", "#{goodsLevel,jdbcType=DECIMAL}");
        }
        
        if (record.getGoodsComment() != null) {
            sql.VALUES("goods_comment", "#{goodsComment,jdbcType=VARCHAR}");
        }
        
        if (record.getCommentContext() != null) {
            sql.VALUES("comment_context", "#{commentContext,jdbcType=VARCHAR}");
        }
        
        if (record.getUserPhone() != null) {
            sql.VALUES("user_phone", "#{userPhone,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateDate() != null) {
            sql.VALUES("create_date", "#{createDate,jdbcType=TIMESTAMP}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_order_comment
     *
     * @mbg.generated
     */
    public String selectByExample(TbOrderCommentExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("comment_id");
        } else {
            sql.SELECT("comment_id");
        }
        sql.SELECT("orderId");
        sql.SELECT("delivery_level");
        sql.SELECT("delivery_comment");
        sql.SELECT("goods_level");
        sql.SELECT("goods_comment");
        sql.SELECT("comment_context");
        sql.SELECT("user_phone");
        sql.SELECT("create_date");
        sql.FROM("tb_order_comment");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_order_comment
     *
     * @mbg.generated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        TbOrderComment record = (TbOrderComment) parameter.get("record");
        TbOrderCommentExample example = (TbOrderCommentExample) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("tb_order_comment");
        
        if (record.getCommentId() != null) {
            sql.SET("comment_id = #{record.commentId,jdbcType=BIGINT}");
        }
        
        if (record.getOrderid() != null) {
            sql.SET("orderId = #{record.orderid,jdbcType=VARCHAR}");
        }
        
        if (record.getDeliveryLevel() != null) {
            sql.SET("delivery_level = #{record.deliveryLevel,jdbcType=DECIMAL}");
        }
        
        if (record.getDeliveryComment() != null) {
            sql.SET("delivery_comment = #{record.deliveryComment,jdbcType=VARCHAR}");
        }
        
        if (record.getGoodsLevel() != null) {
            sql.SET("goods_level = #{record.goodsLevel,jdbcType=DECIMAL}");
        }
        
        if (record.getGoodsComment() != null) {
            sql.SET("goods_comment = #{record.goodsComment,jdbcType=VARCHAR}");
        }
        
        if (record.getCommentContext() != null) {
            sql.SET("comment_context = #{record.commentContext,jdbcType=VARCHAR}");
        }
        
        if (record.getUserPhone() != null) {
            sql.SET("user_phone = #{record.userPhone,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateDate() != null) {
            sql.SET("create_date = #{record.createDate,jdbcType=TIMESTAMP}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_order_comment
     *
     * @mbg.generated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("tb_order_comment");
        
        sql.SET("comment_id = #{record.commentId,jdbcType=BIGINT}");
        sql.SET("orderId = #{record.orderid,jdbcType=VARCHAR}");
        sql.SET("delivery_level = #{record.deliveryLevel,jdbcType=DECIMAL}");
        sql.SET("delivery_comment = #{record.deliveryComment,jdbcType=VARCHAR}");
        sql.SET("goods_level = #{record.goodsLevel,jdbcType=DECIMAL}");
        sql.SET("goods_comment = #{record.goodsComment,jdbcType=VARCHAR}");
        sql.SET("comment_context = #{record.commentContext,jdbcType=VARCHAR}");
        sql.SET("user_phone = #{record.userPhone,jdbcType=VARCHAR}");
        sql.SET("create_date = #{record.createDate,jdbcType=TIMESTAMP}");
        
        TbOrderCommentExample example = (TbOrderCommentExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_order_comment
     *
     * @mbg.generated
     */
    public String updateByPrimaryKeySelective(TbOrderComment record) {
        SQL sql = new SQL();
        sql.UPDATE("tb_order_comment");
        
        if (record.getOrderid() != null) {
            sql.SET("orderId = #{orderid,jdbcType=VARCHAR}");
        }
        
        if (record.getDeliveryLevel() != null) {
            sql.SET("delivery_level = #{deliveryLevel,jdbcType=DECIMAL}");
        }
        
        if (record.getDeliveryComment() != null) {
            sql.SET("delivery_comment = #{deliveryComment,jdbcType=VARCHAR}");
        }
        
        if (record.getGoodsLevel() != null) {
            sql.SET("goods_level = #{goodsLevel,jdbcType=DECIMAL}");
        }
        
        if (record.getGoodsComment() != null) {
            sql.SET("goods_comment = #{goodsComment,jdbcType=VARCHAR}");
        }
        
        if (record.getCommentContext() != null) {
            sql.SET("comment_context = #{commentContext,jdbcType=VARCHAR}");
        }
        
        if (record.getUserPhone() != null) {
            sql.SET("user_phone = #{userPhone,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateDate() != null) {
            sql.SET("create_date = #{createDate,jdbcType=TIMESTAMP}");
        }
        
        sql.WHERE("comment_id = #{commentId,jdbcType=BIGINT}");
        
        return sql.toString();
    }
    
    public String selectReport(TbOrderCommentModel model){
    	SQL sql = new SQL();
    	sql.SELECT("t.orderId as orderid, t.delivery_level as deliveryLevel, t.goods_level as goodsLevel");
    	sql.SELECT("t.user_phone as userPhone, t.comment_context as commentContext");
    	sql.SELECT("date_format(t.create_date, '%Y-%m-%d %T') as createDate, x.money");
    	sql.SELECT("x.couponMoney, x.payMoney, x.status");
    	sql.FROM("tb_order_comment t");
    	sql.LEFT_OUTER_JOIN("tb_order x on x.orderId = t.orderId ");
    	if(StringUtils.isNotBlank(model.getUserPhone()))
    		sql.WHERE("t.user_phone = #{userPhone}");
    		
    	if(StringUtils.isNotBlank(model.getOrderid()))
    		sql.WHERE("t.orderId = #{orderid}");
    	
    	if(StringUtils.isNotBlank(model.getStartDate()) && StringUtils.isNotBlank(model.getEndDate()))
    		sql.WHERE("date_format(t.create_date, '%Y-%m-%d %T') between #{startDate} and #{endDate}");
    	
    	if(model.getMinDLevel() != null && model.getMaxDLevel() != null)
    		sql.WHERE("t.delivery_level between #{minDLevel} and #{maxDLevel}");
    	
    	if(model.getMinOLevel() != null && model.getMaxOLevel() != null)
    		sql.WHERE("t.goods_level between #{minOLevel} and #{maxOLevel}");
    	
    	if(StringUtils.isNotBlank(model.getCommentContext()))
    		sql.WHERE("t.comment_context like '%" + model.getCommentContext() + "%'");
    	
    	sql.ORDER_BY("t.create_date desc");
    	return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_order_comment
     *
     * @mbg.generated
     */
    protected void applyWhere(SQL sql, TbOrderCommentExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}