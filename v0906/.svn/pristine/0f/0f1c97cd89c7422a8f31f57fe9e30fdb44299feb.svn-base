package com.qigan.qiganshop.controller.backstage;

import com.qigan.qiganshop.annocation.StepRecordWatchAble;
import com.qigan.qiganshop.annocation.XltcLogRecord;
import com.qigan.qiganshop.controller.utils.PublicControl;
import com.qigan.qiganshop.pojo.CommonPage;
import com.qigan.qiganshop.pojo.Goods;
import com.qigan.qiganshop.pojo.HomepageCate;
import com.qigan.qiganshop.pojo.XltcGoodsPojo;
import com.qigan.qiganshop.service.GoodsService;
import com.qigan.qiganshop.service.HomePageCateGoodService;
import com.qigan.qiganshop.service.HomePageCateService;
import com.qigan.qiganshop.service.XltcOptInfoService;
import com.qigan.qiganshop.util.Redis.RedisUtil;
import com.qigan.qiganshop.util.access.JedisUtil;
import com.qigan.qiganshop.util.notnull.NotNull;
import com.qigan.qiganshop.util.notnull.StringNotNull;
import com.qigan.qiganshop.util.result.PageResult;
import com.qigan.qiganshop.util.result.XltcResult;
import com.qigan.qiganshop.util.result.format.JsonResult;
import com.qigan.qiganshop.util.result.format.ResultCode;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;


import java.util.ArrayList;
import java.util.List;

/**
 * 商品 controller(SPU)
 *
 * @author wanghao
 * @time 2019-04-22 13:50
 */
@SuppressWarnings("all")
@RestController
@RequestMapping("/goods")
@Api(tags = {"WEB SPU管理接口"})
public class GoodsController {
    @Autowired
    private JsonResult jr;
    @Autowired
    private PublicControl pc;
    @Autowired
    private GoodsService service;
    @Autowired
    private HomePageCateService homePageCateService;
    @Autowired
    private HomePageCateGoodService homePageCateGoodService;
    @Autowired
    XltcOptInfoService optInfoService;

    /**
     * 根据goodsId 查询code
     * @param goodsId
     * @return
     */
    @RequestMapping(value = "/findCodeByGoodsId.do",method = RequestMethod.GET)
    public XltcResult findCodeByGoodsId(@RequestParam String goodsId){
        if(!StringNotNull.check(goodsId))
            return XltcResult.error("参数不全：[ goodsId ] 必传！");
        String code = service.findCodeByGoodsId(goodsId);
        return XltcResult.ok(code);
    }

    /**
     * SPU 商品仅提供修改,查询功能,无新增,删除
     */
    @RequestMapping("update.do")
    @ApiOperation(
            value = "修改SPU 商品信息",
            notes = "修改商品信息,其中,仅可修改以下字段:  \r\n" +
                    "<span style=\"color: red\">备注OR商品详情标准售价\n" +
                    "成本价\n" +
                    "主图图片地址\n" +
                    "商品状态\n" +
                    "是否推荐,0不推荐,1推荐\n" +
                    "是否VIP商品\n" +
                    "VIP价格 </span>",
            httpMethod = "POST")
    @XltcLogRecord(apiName = "修改SPU商品信息")
    public JsonResult update(@RequestBody Goods goods) {
        String goodsId = goods.getGoodsId();
        if (goodsId == null || "".equals(goodsId)) {

            return jr.jsonResultData(ResultCode.FAIL.res_code(), "商品 ID 不能为空");
        }
        return pc.updateUtils(service.update(goods));

    }

    /**
     * SPU 查询详情
     */
    @RequestMapping("findOne.do")
    @ApiOperation(
            value = "查询单个 SPU 商品信息",
            notes = "goodsId 必传",
            httpMethod = "POST")
    public JsonResult findOne(String goodsId) {
        if (goodsId == null || "".equals(goodsId)) {
            return jr.jsonResultData(ResultCode.FAIL.res_code(), "商品 ID 不能为空");
        }
        return jr.jsonResultData(ResultCode.SUCCESS.res_code(), ResultCode.SUCCESS.message(), service.findOne(goodsId));

    }

    /**
     * SPU 商品仅提供修改,查询功能,无新增,删除
     */
    @RequestMapping("findPage.do")
    @ApiOperation(
            value = "分页查询 SPU 商品信息",
            notes = "分页查询商品信息",
            httpMethod = "POST")
    public JsonResult findPage(@RequestBody Goods goods, Integer page, Integer rows) {
        if (page == null || "".equals(page) || rows == null || "".equals(rows)) {
            page = 1;
            rows = 10000;
        }
        return jr.jsonResultData(ResultCode.SUCCESS.res_code(), ResultCode.SUCCESS.message(), service.findPageGoods(goods, page, rows));

    }


    @RequestMapping("findGoodsByIds.do")
    @ApiOperation(
    		value = "分页查询 SPU 商品信息",
    		notes = "分页查询商品信息",
    		httpMethod = "POST")
    public JsonResult findGoodsByIds() {
    	return jr.jsonResultData(ResultCode.SUCCESS.res_code(), ResultCode.SUCCESS.message(), service.goodsByIds());
    	
    }

    /**
     * SPU 商品仅提供修改,查询功能,无新增,删除
     */
    @RequestMapping("updateStatus.do")
    @ApiOperation(
            value = "修改状态",
            notes = "goodIds[] 商品 ID 数组  status 状态值",
            httpMethod = "POST")
    @XltcLogRecord(apiName = "修改SPU商品状态")
    public JsonResult updateStatus(String[] goodIds, String status) {

        if (goodIds.length > 0 && StringNotNull.check(status)) {
            return pc.updateUtils(service.updateStatus(goodIds, status));
        }
        return jr.jsonResultData(ResultCode.FAIL.res_code(), "参数有误!");
    }

    /**
     * SPU 商品仅提供修改,查询功能,无新增,删除
     */
    @RequestMapping("updateEnable.do")
    @ApiOperation(
            value = "修改是否启用",
            notes = "goodIds[] 商品 ID 数组  status 状态值 1,禁用  0 启用",
            httpMethod = "POST")
    @XltcLogRecord(apiName = "修改SPU商品启用")
    public JsonResult updateEnable(String[] goodIds, String status) {

        if (goodIds.length > 0 && StringNotNull.check(status)) {
            return pc.updateUtils(service.updateEnable(goodIds, status));
        }
        return jr.jsonResultData(ResultCode.FAIL.res_code(), "参数有误!");
    }

    /**
     * SPU 商品仅提供修改,查询功能,无新增,删除
     */
    @RequestMapping("findHomePageUnionGoods.do")
    @ApiOperation(
            value = "分页查询 SPU 商品信息",
            notes = "分页查询商品信息",
            httpMethod = "POST")
    public JsonResult findHomePageUnionGoods(String homepageCateId, String cateId) {

        if (StringNotNull.check(homepageCateId)) {
            HomepageCate one = homePageCateService.findOne(homepageCateId);
            if (one == null) {

                return jr.jsonResultData(ResultCode.FAIL.res_code(), ResultCode.FAIL.message(), null);
            }
            List<Goods> result = homePageCateGoodService.findGoodsByCateId(homepageCateId, null, new CommonPage());
            ArrayList<Goods> list = new ArrayList<>();
            if (StringNotNull.check(cateId)) {
                for (Goods goods : result) {
                    if (cateId.equals(goods.getCategoryCode())) {
                        list.add(goods);
                    }
                }
                return jr.jsonResultData(ResultCode.SUCCESS.res_code(), ResultCode.SUCCESS.message(), new PageResult(list.size(), list));
            }else {
                return jr.jsonResultData(ResultCode.SUCCESS.res_code(), ResultCode.SUCCESS.message(), new PageResult(result.size(), result));

            }
        }
        return jr.jsonResultData(ResultCode.FAIL.res_code(), ResultCode.FAIL.message(), null);

    }
    
    @RequestMapping("findStockById.do")
    @ApiOperation(
            value = "修改是否启用",
            notes = "goodIds[] 商品 ID 数组  status 状态值 1,禁用  0 启用",
            httpMethod = "POST")
    public JsonResult findStockById(String goodsId) {
        return jr.jsonResultData(ResultCode.SUCCESS.res_code(), ResultCode.SUCCESS.message(), service.findGoodsByPlatform(goodsId));
    }
    
    @RequestMapping(value = "findGoodsAll.do", method = RequestMethod.POST)
    public XltcResult findGoodsAll(@RequestBody XltcGoodsPojo goods){
    	return XltcResult.ok(service.findAllGoods(goods));
    }
}
