package com.qigan.qiganshop.controller.frontend;

import com.alibaba.druid.util.StringUtils;
import com.qigan.qiganshop.pojo.AppUser;
import com.qigan.qiganshop.pojo.Goods;
import com.qigan.qiganshop.service.AppUserService;
import com.qigan.qiganshop.service.GoodsService;
import com.qigan.qiganshop.util.Redis.RedisUtil;
import com.qigan.qiganshop.util.notnull.NotNull;
import com.qigan.qiganshop.util.notnull.StringNotNull;
import com.qigan.qiganshop.util.result.PageResult;
import com.qigan.qiganshop.util.result.XltcResult;
import com.qigan.qiganshop.util.result.format.JsonResult;
import com.qigan.qiganshop.util.result.format.ResultCode;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.ServletRequestUtils;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import redis.clients.jedis.Jedis;

import javax.servlet.http.HttpServletRequest;
import java.util.ArrayList;

/**
 * 规格 controller
 *
 * @author wanghao
 */
@SuppressWarnings("all")
@RestController
@RequestMapping("/app/Goods")
@Api(value = "APP SPU商品controller", tags = {"APP SPU商品controller"})
public class AppGoodsController {
    @Autowired
    private JsonResult jr;
    @Autowired
    private GoodsService service;
    @Autowired
    private AppUserService userService;



    /**
     * 查询首页商品
     *
     * @return
     */
    @RequestMapping("findPage.do")
    @ApiOperation(
            value = "查询列表商品 测试坐标值(coordinate):116.865782,36.666315",
            notes = "查询首页商品,按照竞价优先展示" + "注意:  \n" +
                    "goods 为必填参数, 如果想查询name=='abc'的报名者,参数须按照以下结构传输  \n" +
                    "               {  \n" +
                    "                   \"name\":\"abc\"  \n" +
                    "               }  \n" +
                    "启用分页时,page size 必须传递,不传递则不启用分页  \n" +
                    "coordinate 经纬度必须传,用于查询配送范围以及库存  \n" +
                    "如果想查询所有数据且不附加任何条件( 即 findAll() ),参数须按照以下结构传输  \n" +
                    "               {  \n" +
                    "               }  \n" +
                    "适用场景:" +
                    "(1),首页上部 10 个分类,点击后可调用此方法,根据 headCate 进行条件查询,得到商品列表 \n" +
                    "(2),首页底部多个分类,点击后可调用此方法,根据 endCate 进行条件查询,得到商品列表  \n" ,
            httpMethod = "POST")
    public JsonResult findHomePage(HttpServletRequest request, @RequestBody Goods goods, String coordinate, Integer page, Integer size) {
        page = ServletRequestUtils.getIntParameter(request, "page", 1);
        size = ServletRequestUtils.getIntParameter(request, "size", 10);
        if (coordinate == null || "".equals(coordinate)) {

            return jr.jsonResultData(ResultCode.FAIL.res_code(), "坐标为空!", NotNull.checkNull(new PageResult(0, new ArrayList())));
        }

        return (JsonResult) NotNull.checkNull(service.findPage(goods, coordinate, page, size));
    }

    /**
     * 查询首页商品
     *
     * @return
     */

    @RequestMapping("findByCategory.do")
    @ApiOperation(
            value = "根据分类查询商品 测试坐标值(coordinate):116.865782,36.666315",
            notes = "根据分类查询商品,按照竞价优先展示",
            httpMethod = "POST")
    public JsonResult findByCategory(String categoryId, String coordinate) {
        if (coordinate == null || "".equals(coordinate)) {

            return jr.jsonResultData(ResultCode.FAIL.res_code(), "坐标为空!", NotNull.checkNull(new PageResult(0, new ArrayList())));
        }
        if (categoryId != null && !"".equals(categoryId)) {

            Goods goods = new Goods();
            goods.setCategoryCode(categoryId);
            return jr.jsonResultData(ResultCode.SUCCESS.res_code(), ResultCode.SUCCESS.message(), NotNull.checkNull(service.findPage(goods, coordinate, null, null)));
        }
        return jr.jsonResultData(ResultCode.FAIL.res_code(), ResultCode.FAIL.message(), NotNull.checkNull(new PageResult(0, new ArrayList())));

    }

    /**
     * 查询单个商品
     *
     * @return
     */

    @RequestMapping("findOne.do")
    @ApiOperation(
            value = "查询单个商品",
            notes = "查询单个商品",
            httpMethod = "POST")
    public JsonResult findOne(String token, String goodsId) {
        if (StringUtils.isEmpty(goodsId)) {
            return jr.jsonResultData(ResultCode.FAIL.res_code(), "goodsId 不能为空!", NotNull.checkNull(new Goods()));
        }
        Goods one = service.findOne(token, goodsId);
        if (one == null) {
            return jr.jsonResultData(ResultCode.SUCCESS.res_code(), "该商品已下架");
        }
        return jr.jsonResultData(ResultCode.SUCCESS.res_code(), ResultCode.SUCCESS.message(), NotNull.checkNull(one));

    }

    /**
     * 查询推荐商品
     *
     * @return
     */

    @RequestMapping("findByRand.do")
    @ApiOperation(
            value = "查询推荐商品 测试坐标值(coordinate):116.865782,36.666315",
            notes = "查询推荐商品,固定 20 个",
            httpMethod = "POST")
    public JsonResult findByRand(String coordinate) {
        return jr.jsonResultData(ResultCode.SUCCESS.res_code(), ResultCode.SUCCESS.message(), NotNull.checkNull(service.findByRand(coordinate)));
    }


    @RequestMapping("/deleteGoods.do")
    @ApiOperation(
    		value = "查询推荐商品 测试坐标值(coordinate):116.865782,36.666315",
    		notes = "查询推荐商品,固定 20 个",
    		httpMethod = "POST")
    public JsonResult deleteGoods(String... goodsIds) {
    	service.deleteGoods(null, goodsIds);
    	return jr.jsonResultData("200");
    }

}
